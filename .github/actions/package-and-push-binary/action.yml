name: Package and push binary
description: >
  Builds the MCPM Rust binary for a specific platform and architecture,
  packages it into a compressed archive (.tar.gz or .zip), and uploads it
  as a release asset when running on a tagged release.
inputs:
  arch:
    description: CPU architecture of the build target (e.g., x86_64, arm64).
    required: true
  os:
    description: Target operating system (linux, windows, or macos).
    required: true
  ref_name:
    description: Current Git reference name, typically the release tag (e.g., v1.0.0).
    required: true
  variant:
    description: The compiled variant, one of gui or cli.
    required: true
  source_directory:
    description: The directory where the binary is located.
    required: true
  gpg_private_key:
    description: The private key for signing the release asset.
    required: true
  gpg_passphrase:
    description: The passphrase for the private key.
    required: true

runs:
  using: composite
  steps:

    - name: Package binary
      id: package
      shell: bash
      run: |
        BIN="mcpm"
        [[ "${{ inputs.os }}" == "windows" ]] && BIN="mcpm.exe"
        SRC="${{ inputs.source_directory }}/$BIN"
        EXT=$([[ "${{ inputs.os }}" == "windows" ]] && echo "zip" || echo "tar.gz")
        OUT="mcpm-${{ inputs.variant }}-${{ inputs.ref_name }}-${{ inputs.os }}-${{ inputs.arch }}.${EXT}"
        if [[ "${{ inputs.os }}" == "windows" ]]; then
          7z a "$OUT" "$SRC" >NUL
        else
          tar -C "${{ inputs.source_directory }}" -czf "$OUT" "$BIN"
        fi
        echo "archive=$OUT" >> "$GITHUB_OUTPUT"

    - name: Generate SHA256 checksum
      id: checksum
      shell: bash
      run: |
        FILE="${{ steps.package.outputs.archive }}"
        if [[ "${{ inputs.os }}" == "windows" ]]; then
          certutil -hashfile "$FILE" SHA256 | awk 'NR==2{print $1}' > "$FILE.sha256"
        else
          shasum -a 256 "$FILE" > "$FILE.sha256"
        fi
        echo "checksum_file=$FILE.sha256" >> "$GITHUB_OUTPUT"

    - name: Import GPG key
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      env:
        GPG_PRIVATE_KEY: ${{ inputs.gpg_private_key }}
      run: |
        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        KEY_ID=$(gpg --list-keys --with-colons | grep '^pub' | cut -d: -f5 | head -n1)
        echo "Using key: $KEY_ID"

    - name: Sign archive
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      env:
        GPG_PASSPHRASE: ${{ inputs.gpg_passphrase }}
      run: |
        gpg --batch --yes --pinentry-mode loopback \
          --passphrase "$GPG_PASSPHRASE" \
          --output "${{ steps.package.outputs.archive }}.sig" \
          --detach-sign "${{ steps.package.outputs.archive }}"

    - name: Upload signature
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.package.outputs.archive }}.sig

    - name: Upload checksum
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.checksum.outputs.checksum_file }}

    - name: Upload release asset
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.package.outputs.archive  }}
