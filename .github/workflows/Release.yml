name: Build and Publish Docker Images

on:
  release:
    types: [published]

jobs:
  setup:
    runs-on: ubuntu-24.04
    outputs:
      image: ${{ steps.set.outputs.image }}
    steps:
      - id: set
        run: echo "image=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

  build-binaries:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: setup
    strategy:
      matrix:
        include:
          # Linux
          - runner: ubuntu-24.04
            os: linux
            arch: x86_64
            target: x86_64-unknown-linux-musl
          - runner: ubuntu-24.04-arm
            os: linux
            arch: arm64
            target: aarch64-unknown-linux-musl

          # Windows (MSVC)
          - runner: windows-latest
            os: windows
            arch: x86_64
            target: x86_64-pc-windows-msvc

          # macOS
          - runner: macos-15
            os: macos
            arch: arm64
            target: aarch64-apple-darwin
          - runner: macos-15-intel
            os: macos
            arch: x86_64
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
      actions: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Build and push Docker image (${{ matrix.arch }})
        if: runner.os == 'Linux'
        uses: ./.github/actions/build-docker-image
        with:
          arch: ${{ matrix.arch }}
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image: ${{ needs.setup.outputs.image }}

      - name: Extract binary from Docker image (${{ matrix.arch }})
        if: runner.os == 'Linux'
        run: |
          DIRECTORY=./target/${{ matrix.target }}/release
          CID=$(docker create "${{ needs.setup.outputs.image }}:${{ matrix.arch }}")
          mkdir -p $DIRECTORY
          docker cp $CID:/usr/local/bin/mcpm $DIRECTORY/mcpm
          docker rm $CID

      - name: Build binary for ${{ matrix.os }}-${{ matrix.arch }}
        if: runner.os != 'Linux'
        uses: ./.github/actions/build-binary
        with:
          target: ${{ matrix.target }}
          variant: cli
      
      - name: Package and upload ${{ matrix.os }}-${{ matrix.arch }} CLI binary
        uses: ./.github/actions/package-and-push-binary
        with:
          arch: ${{ matrix.arch }}
          os: ${{ matrix.os }}
          ref_name: ${{ github.ref_name }}
          variant: cli
          source_directory: target/${{ matrix.target }}/release
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}

  docker-manifest:
    runs-on: ubuntu-latest
    needs:
      - setup
      - build-binaries
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.setup.outputs.image }}
          tags: |
            type=sha,format=short,enable=${{ github.event_name != 'pull_request' }}
            type=semver,pattern=v{{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=unstable,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Create multi-arch manifest
        uses: ./.github/actions/docker-tag-manifest
        with:
          image: ${{ needs.setup.outputs.image }}
          ref_name: ${{ github.ref_name }}
          tags: ${{ steps.meta.outputs.tags }}
          token: ${{ secrets.GITHUB_TOKEN }}
